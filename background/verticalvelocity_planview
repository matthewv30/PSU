import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import netCDF4 as NC
import numpy.ma as ma
import math
from scipy.io import loadmat
from tdr_tc_centering_with_example import distance, get_bearing 

# === Load Shear Data ===
os.chdir('/rita/s0/scratch/nrb171/harvey_postproc/9km/')
shearfname = "wrf_shear_nondivirrot02.mat"
mat = loadmat(shearfname)
shear_dir = np.array(mat['shdi'][0, :])
shear_mag = np.array(mat['shmg'][0, :])  # Shear magnitude, assumed units m/s

tstep = 120
shD = shear_dir[11]   # 04Z
shM = shear_mag[11]   # Magnitude (in m/s)
shM_knots = shM * 1.94384  # Convert to knots

# Compute shear vector components (Cartesian)
cart_angle = (270 - shD + 180) % 360 
ush = math.cos(math.radians(cart_angle)) * shM
vsh = math.sin(math.radians(cart_angle)) * shM

# Define quadrant lines
angles = [cart_angle, (cart_angle + 90) % 360]
line_colors = ['gray', 'gray']
line_labels = ['Shear Axis', 'Cross-Shear Axis']

#Load TC Center
os.chdir('/rita/s0/bsr5234/modelling/tilt_analysis/')
allstks = np.load('stored_centers_Harvey.npy')
ctrlons = allstks[:, 0, 0]
ctrlats = allstks[:, 1, 0]
wctrys = allstks[:, 5, 0]
wctrxs = allstks[:, 6, 0]
ctrlon_0400Z = ctrlons[tstep]
ctrlat_0400Z = ctrlats[tstep]

#Load W Wind Field
level_index = 22
os.chdir('/rita/s0/bsr5234/modelling/ICTG/modeldatafiles/wrf_vbl_files/0400Z/')
wwind_file = 'wrfout_d04_2017-08-25_04:00:00_wa_z.nc'
wwind_data = NC.Dataset(wwind_file)
wwind = wwind_data.variables['wa_interp'][level_index]
lat = wwind_data.variables['XLAT']
lon = wwind_data.variables['XLONG']
levels = wwind_data.variables['level'][:]
print(levels[level_index])

#Distance Grid
radius_grid = distance(ctrlats[tstep], ctrlons[tstep], lat, lon)
x_axes = np.concatenate((-radius_grid[415, :407], radius_grid[415, 407:]))
y_axes = np.concatenate((-radius_grid[:415, 407], radius_grid[415:, 407]))
levels_wwind = np.arange(-20, 20.1, 2)

#Plot
fig, ax = plt.subplots(figsize=(8, 4))
PT = ax.contourf(x_axes, y_axes, wwind, cmap=cm.seismic, levels=levels_wwind, extend='both')
ax.scatter(0, 0, color='r', marker='+', label='Storm Center')
cl = plt.colorbar(PT, ax=ax)
cl.ax.set_title("m/s")

#Plot Shear Vector
ax.quiver(0, 0, ush, vsh, color='k', scale=50, width=0.01, zorder=5)
textstr = '\n'.join((r'Shear Heading: %d°' % (shD,), r'Shear Mag: %.1f kt' % (shM_knots,)))
props = dict(boxstyle='round', facecolor='lightgray', alpha=1)
ax.text(-90, 90, textstr, fontsize=10, verticalalignment='top', bbox=props, zorder=6)

#Shear Axis & Cross-Shear Lines
domain_width = 100
line_len = domain_width * 1.5
for angle, color, label in zip(angles, line_colors, line_labels):
    dx = math.cos(math.radians(angle)) * line_len
    dy = math.sin(math.radians(angle)) * line_len
    ax.plot([-dx, dx], [-dy, dy], color=color, linestyle='--', label=label)

#Format Axes
ax.set_xlim(-domain_width, domain_width)
ax.set_ylim(-domain_width, domain_width)
ticks = np.arange(-domain_width, domain_width + 1, 25)
ax.set_xticks(ticks)
ax.set_yticks(ticks)
ax.set_xlabel("Distance from storm center (km)")
ax.set_ylabel("Distance from storm center (km)")
ax.set_title("Vertical Velocity with Shear Quadrants", fontsize=12)

# Annotate Quadrant Labels =
quad_labels = ['UR', 'DR', 'DL', 'UL']
dws = (shD + 180) % 360 # Downshear direction (where shear is going TO)
ups = shD % 360  # Upshear (where shear comes FROM)
rts = (dws + 90) % 360  # Right of shear (90° clockwise from downshear)
lfs = (dws - 90) % 360  # Left of shear (90° counterclockwise from downshear)

# Midpoints of each quadrant (in polar degrees)
quadrant_angles = {
    'UR': (ups - 45) % 360,
    'DR': (dws + 45) % 360,
    'DL': (dws - 45) % 360,
    'UL': (ups + 45) % 360,
}

# Radius for placing label (in km)
label_radius = 50  # Adjust as needed

# Add quadrant labels
for label, angle in quadrant_angles.items():
    angle_rad = np.radians((270 - angle) % 360)  # Convert to Cartesian angle
    x = label_radius * np.cos(angle_rad)
    y = label_radius * np.sin(angle_rad)
    ax.text(x, y, label, fontsize=10, ha='center', va='center',
            bbox=dict(boxstyle='round', facecolor='white', alpha=0.6))


file_name = '/rita/s0/mjv5638/plots/A_thesis/vertical_velocity_planview_with_shear'
plt.savefig(file_name, bbox_inches="tight", dpi=200)